// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enums
enum TransactionType {
  income
  expense
  transfer
}

enum AccountType {
  bank
  cash
  credit_card
  e_money
}

enum CategoryType {
  income
  expense
}

enum ParentType {
  fixed
  variable
  regular
  temporary
}

enum PaymentMethod {
  cash
  credit
  e_money
}

enum Currency {
  JPY
  USD
}

enum BudgetPeriod {
  monthly
}

// NextAuth.js Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // リレーション
  accounts      Account[]
  sessions      Session[]
  budgetAccounts BudgetAccount[]
  categories    Category[]
  transactions  Transaction[]
  templates     TransactionTemplate[]
  budgets       Budget[]
  simulations   Simulation[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 口座（名前を変更してNextAuth.jsのAccountと衝突を回避）
model BudgetAccount {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        AccountType
  balance     Int      // 金額を整数として保存（例: 1234 = 1234円）
  currency    Currency @default(JPY)
  lastUpdated DateTime @default(now())
  
  // リレーション
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  templates    TransactionTemplate[]
  
  @@map("budget_accounts")
}

// カテゴリ
model Category {
  id         String      @id @default(cuid())
  userId     String
  name       String
  type       CategoryType
  parentType ParentType
  isCustom   Boolean     @default(false)
  order      Int         @default(0)
  color      String      // グラフ表示用
  
  // リレーション
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  templates    TransactionTemplate[]
  budgets      Budget[]
  
  @@map("categories")
}

// 取引
model Transaction {
  id            String        @id @default(cuid())
  userId        String
  date          DateTime
  amount        Int           // 金額を整数として保存（例: 1234 = 1234円）
  type          TransactionType
  categoryId    String
  accountId     String
  paymentMethod PaymentMethod?
  description   String?       // メモ欄をオプショナルに
  isRecurring   Boolean       @default(false)
  recurringDay  Int?
  
  // リレーション
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  account  BudgetAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

// 取引テンプレート
model TransactionTemplate {
  id            String        @id @default(cuid())
  userId        String
  name          String
  type          TransactionType
  amount        Int           // 金額を整数として保存（例: 1234 = 1234円）
  categoryId    String
  accountId     String
  paymentMethod PaymentMethod?
  description   String?       // メモ欄をオプショナルに
  
  // リレーション
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  account  BudgetAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("transaction_templates")
}

// 予算
model Budget {
  id         String      @id @default(cuid())
  userId     String
  categoryId String
  amount     Int         // 金額を整数として保存（例: 1234 = 1234円）
  period     BudgetPeriod @default(monthly)
  year       Int
  month      Int
  
  // リレーション
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, year, month])
  @@map("budgets")
}

// シミュレーション
model Simulation {
  id       String   @id @default(cuid())
  userId   String
  name     String
  baseDate DateTime
  endDate  DateTime
  events   Json     // What-if events
  result   Json     // Calculation results
  
  // リレーション
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("simulations")
}
